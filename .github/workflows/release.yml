# .github/workflows/release.yml

name: Release

on:
  push:
    tags:
      - 'v*' # Trigger only when tags starting with 'v' are pushed

jobs:
  # Job to build binaries for different platforms
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Define target combinations
        target: [linux/amd64, windows/amd64, darwin/amd64]
        # Add arm64 targets if needed:
        # target: [linux/amd64, windows/amd64, darwin/amd64, linux/arm64, darwin/arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21' # Match the Go version in your go.mod if different
          cache: false # Disable setup-go's built-in cache

      # It's generally better to run tests in a separate job before building
      # - name: Run Unit Tests (Optional here, better in a separate preceding job)
      #   run: go test -v ./...

      - name: Build Release Binary for ${{ matrix.target }}
        run: |
          # Extract GOOS and GOARCH from matrix target
          IFS='/' read -r GOOS GOARCH <<< "${{ matrix.target }}"
          # Set output name
          OUTPUT_NAME="sshx-${GOOS}-${GOARCH}"
          if [ "$GOOS" == "windows" ]; then
            OUTPUT_NAME+=".exe"
          fi
          # Add flags for smaller binaries
          LDFLAGS="-s -w"
          # Build
          echo "Building $OUTPUT_NAME..."
          env GOOS=$GOOS GOARCH=$GOARCH go build -v -ldflags="$LDFLAGS" -o "$OUTPUT_NAME" .
          # List created file
          ls -l "$OUTPUT_NAME"
        env:
          # Set environment variables for cross-compilation if needed by build script
          # GOOS: ${{ matrix.goos }} # Not strictly needed if read from matrix.target
          # GOARCH: ${{ matrix.goarch }} # Not strictly needed if read from matrix.target

      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sshx-build-${{ matrix.target }} # Unique name per target
          path: sshx-${{ matrix.target }}* # Upload the specific binary built
          if-no-files-found: error # Error if the build didn't produce the expected file
          retention-days: 1 # Keep artifacts only briefly

  # Separate Job for Testing (Runs Before Release)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: false # Disable setup-go's built-in cache

      - name: Build (Needed for Integration Test Binary)
        run: go build -v ./...

      - name: Run Unit Tests
        run: go test -v ./...

      - name: Run Integration Tests
        run: go test -tags integration -v ./...

  # Job to create the release after successful tests and builds
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, build] # Run after tests and all builds are finished
    # Grant permissions necessary for creating releases and uploading assets
    permissions:
      contents: write

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts into an 'artifacts' directory
          # Artifacts will be in subdirectories like artifacts/sshx-build-linux-amd64/

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          # Use a glob pattern to find all binaries within the downloaded artifact subdirectories
          artifactPath: artifacts/sshx-build-*/*
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: ${{ contains(github.ref_name, '-beta') || contains(github.ref_name, '-rc') }}
          # Allow updates if release already exists (e.g., from a failed run)
          allowUpdates: true